#include <gtest/gtest.h>
#include "icdl.h"
#include "test_utils.h"
#include "models/ResNet.h"


TEST(ResNetTest, OpNameTest){
    std::vector<std::string> name_list = {
        "conv1.weight",
        "bn1.weight",
        "bn1.bias",
        "bn1.running_mean",
        "bn1.running_var",
        "layer1->0->conv1.weight",
        "layer1->0->bn1.weight",
        "layer1->0->bn1.bias",
        "layer1->0->bn1.running_mean",
        "layer1->0->bn1.running_var",
        "layer1->0->conv2.weight",
        "layer1->0->bn2.weight",
        "layer1->0->bn2.bias",
        "layer1->0->bn2.running_mean",
        "layer1->0->bn2.running_var",
        "layer1->1->conv1.weight",
        "layer1->1->bn1.weight",
        "layer1->1->bn1.bias",
        "layer1->1->bn1.running_mean",
        "layer1->1->bn1.running_var",
        "layer1->1->conv2.weight",
        "layer1->1->bn2.weight",
        "layer1->1->bn2.bias",
        "layer1->1->bn2.running_mean",
        "layer1->1->bn2.running_var",
        "layer2->0->conv1.weight",
        "layer2->0->bn1.weight",
        "layer2->0->bn1.bias",
        "layer2->0->bn1.running_mean",
        "layer2->0->bn1.running_var",
        "layer2->0->conv2.weight",
        "layer2->0->bn2.weight",
        "layer2->0->bn2.bias",
        "layer2->0->bn2.running_mean",
        "layer2->0->bn2.running_var",
        "layer2->0->downsample->0.weight",
        "layer2->0->downsample->1.weight",
        "layer2->0->downsample->1.bias",
        "layer2->0->downsample->1.running_mean",
        "layer2->0->downsample->1.running_var",
        "layer2->1->conv1.weight",
        "layer2->1->bn1.weight",
        "layer2->1->bn1.bias",
        "layer2->1->bn1.running_mean",
        "layer2->1->bn1.running_var",
        "layer2->1->conv2.weight",
        "layer2->1->bn2.weight",
        "layer2->1->bn2.bias",
        "layer2->1->bn2.running_mean",
        "layer2->1->bn2.running_var",
        "layer3->0->conv1.weight",
        "layer3->0->bn1.weight",
        "layer3->0->bn1.bias",
        "layer3->0->bn1.running_mean",
        "layer3->0->bn1.running_var",
        "layer3->0->conv2.weight",
        "layer3->0->bn2.weight",
        "layer3->0->bn2.bias",
        "layer3->0->bn2.running_mean",
        "layer3->0->bn2.running_var",
        "layer3->0->downsample->0.weight",
        "layer3->0->downsample->1.weight",
        "layer3->0->downsample->1.bias",
        "layer3->0->downsample->1.running_mean",
        "layer3->0->downsample->1.running_var",
        "layer3->1->conv1.weight",
        "layer3->1->bn1.weight",
        "layer3->1->bn1.bias",
        "layer3->1->bn1.running_mean",
        "layer3->1->bn1.running_var",
        "layer3->1->conv2.weight",
        "layer3->1->bn2.weight",
        "layer3->1->bn2.bias",
        "layer3->1->bn2.running_mean",
        "layer3->1->bn2.running_var",
        "layer4->0->conv1.weight",
        "layer4->0->bn1.weight",
        "layer4->0->bn1.bias",
        "layer4->0->bn1.running_mean",
        "layer4->0->bn1.running_var",
        "layer4->0->conv2.weight",
        "layer4->0->bn2.weight",
        "layer4->0->bn2.bias",
        "layer4->0->bn2.running_mean",
        "layer4->0->bn2.running_var",
        "layer4->0->downsample->0.weight",
        "layer4->0->downsample->1.weight",
        "layer4->0->downsample->1.bias",
        "layer4->0->downsample->1.running_mean",
        "layer4->0->downsample->1.running_var",
        "layer4->1->conv1.weight",
        "layer4->1->bn1.weight",
        "layer4->1->bn1.bias",
        "layer4->1->bn1.running_mean",
        "layer4->1->bn1.running_var",
        "layer4->1->conv2.weight",
        "layer4->1->bn2.weight",
        "layer4->1->bn2.bias",
        "layer4->1->bn2.running_mean",
        "layer4->1->bn2.running_var",
        "fc.weight",
        "fc.bias"
    };
    auto model = icdl::resnet::resnet18(1000);
    auto name_tensor_pairs = model->get_all_saved_tensors();
    for(const auto & py_name : name_list){
        //std::cout << name << std::endl;
        auto find = name_tensor_pairs.find(py_name);
        EXPECT_TRUE(find != nullptr) << "Cannot find tensor in ICDL model:" << py_name;
    }
}