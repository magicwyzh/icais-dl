// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tensor.proto

#include "Tensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FixpointRepresent_Tensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatpointRepresent_Tensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorStorage_Tensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TensorDataDescriptor_Tensor_2eproto;
namespace icdl_proto {
class FixpointRepresentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixpointRepresent> _instance;
} _FixpointRepresent_default_instance_;
class FloatpointRepresentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatpointRepresent> _instance;
} _FloatpointRepresent_default_instance_;
class TensorDataDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorDataDescriptor> _instance;
  const ::icdl_proto::FixpointRepresent* fix_point_;
  const ::icdl_proto::FloatpointRepresent* flo_point_;
} _TensorDataDescriptor_default_instance_;
class TensorStorageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorStorage> _instance;
} _TensorStorage_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tensor> _instance;
} _Tensor_default_instance_;
}  // namespace icdl_proto
static void InitDefaultsFixpointRepresent_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_FixpointRepresent_default_instance_;
    new (ptr) ::icdl_proto::FixpointRepresent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::FixpointRepresent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FixpointRepresent_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFixpointRepresent_Tensor_2eproto}, {}};

static void InitDefaultsFloatpointRepresent_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_FloatpointRepresent_default_instance_;
    new (ptr) ::icdl_proto::FloatpointRepresent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::FloatpointRepresent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatpointRepresent_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatpointRepresent_Tensor_2eproto}, {}};

static void InitDefaultsTensorDataDescriptor_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_TensorDataDescriptor_default_instance_;
    new (ptr) ::icdl_proto::TensorDataDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::TensorDataDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TensorDataDescriptor_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTensorDataDescriptor_Tensor_2eproto}, {
      &scc_info_FixpointRepresent_Tensor_2eproto.base,
      &scc_info_FloatpointRepresent_Tensor_2eproto.base,}};

static void InitDefaultsTensorStorage_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_TensorStorage_default_instance_;
    new (ptr) ::icdl_proto::TensorStorage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::TensorStorage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TensorStorage_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensorStorage_Tensor_2eproto}, {
      &scc_info_TensorDataDescriptor_Tensor_2eproto.base,}};

static void InitDefaultsTensor_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_Tensor_default_instance_;
    new (ptr) ::icdl_proto::Tensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::Tensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tensor_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensor_Tensor_2eproto}, {
      &scc_info_TensorStorage_Tensor_2eproto.base,}};

void InitDefaults_Tensor_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FixpointRepresent_Tensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatpointRepresent_Tensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorDataDescriptor_Tensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorStorage_Tensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tensor_Tensor_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Tensor_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Tensor_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Tensor_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Tensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, total_bits_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, is_signed_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, frac_point_locations_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, scalars_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FixpointRepresent, zero_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FloatpointRepresent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FloatpointRepresent, total_bits_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FloatpointRepresent, is_signed_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FloatpointRepresent, exp_bits_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::FloatpointRepresent, mantissa_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorDataDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorDataDescriptor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorDataDescriptor, dtype_),
  offsetof(::icdl_proto::TensorDataDescriptorDefaultTypeInternal, fix_point_),
  offsetof(::icdl_proto::TensorDataDescriptorDefaultTypeInternal, flo_point_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorDataDescriptor, data_represent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorStorage, data_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorStorage, data_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, storage_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, tensor_size_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, mem_layout_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::icdl_proto::FixpointRepresent)},
  { 10, -1, sizeof(::icdl_proto::FloatpointRepresent)},
  { 19, -1, sizeof(::icdl_proto::TensorDataDescriptor)},
  { 28, -1, sizeof(::icdl_proto::TensorStorage)},
  { 35, -1, sizeof(::icdl_proto::Tensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_FixpointRepresent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_FloatpointRepresent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_TensorDataDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_TensorStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_Tensor_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Tensor_2eproto = {
  {}, AddDescriptors_Tensor_2eproto, "Tensor.proto", schemas,
  file_default_instances, TableStruct_Tensor_2eproto::offsets,
  file_level_metadata_Tensor_2eproto, 5, file_level_enum_descriptors_Tensor_2eproto, file_level_service_descriptors_Tensor_2eproto,
};

const char descriptor_table_protodef_Tensor_2eproto[] =
  "\n\014Tensor.proto\022\nicdl_proto\"~\n\021FixpointRe"
  "present\022\022\n\ntotal_bits\030\001 \003(\r\022\021\n\tis_signed"
  "\030\002 \003(\010\022\034\n\024frac_point_locations\030\003 \003(\005\022\017\n\007"
  "scalars\030\004 \003(\002\022\023\n\013zero_points\030\005 \003(\005\"e\n\023Fl"
  "oatpointRepresent\022\022\n\ntotal_bits\030\001 \001(\r\022\021\n"
  "\tis_signed\030\002 \001(\010\022\020\n\010exp_bits\030\003 \001(\r\022\025\n\rma"
  "ntissa_bits\030\004 \001(\r\"\241\002\n\024TensorDataDescript"
  "or\022>\n\005dtype\030\001 \001(\0162/.icdl_proto.TensorDat"
  "aDescriptor.TensorDataType\0222\n\tfix_point\030"
  "\002 \001(\0132\035.icdl_proto.FixpointRepresentH\000\0224"
  "\n\tflo_point\030\003 \001(\0132\037.icdl_proto.Floatpoin"
  "tRepresentH\000\"M\n\016TensorDataType\022\014\n\010FLOAT_"
  "32\020\000\022\014\n\010FLOAT_16\020\001\022\014\n\010FIXPOINT\020\002\022\021\n\rINVA"
  "LID_DTYPE\020\003B\020\n\016data_represent\"X\n\rTensorS"
  "torage\022\014\n\004data\030\001 \001(\014\0229\n\017data_descriptor\030"
  "\002 \001(\0132 .icdl_proto.TensorDataDescriptor\""
  "\315\001\n\006Tensor\022*\n\007storage\030\002 \001(\0132\031.icdl_proto"
  ".TensorStorage\022\023\n\013tensor_size\030\003 \003(\004\0226\n\nm"
  "em_layout\030\004 \001(\0162\".icdl_proto.Tensor.Tens"
  "orMemLayout\"J\n\017TensorMemLayout\022\020\n\014DENSE_"
  "LAYOUT\020\000\022\021\n\rSPARSE_LAYOUT\020\001\022\022\n\016INVALID_L"
  "AYOUT\020\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Tensor_2eproto = {
  false, InitDefaults_Tensor_2eproto, 
  descriptor_table_protodef_Tensor_2eproto,
  "Tensor.proto", &assign_descriptors_table_Tensor_2eproto, 855,
};

void AddDescriptors_Tensor_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Tensor_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Tensor_2eproto = []() { AddDescriptors_Tensor_2eproto(); return true; }();
namespace icdl_proto {
const ::google::protobuf::EnumDescriptor* TensorDataDescriptor_TensorDataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Tensor_2eproto);
  return file_level_enum_descriptors_Tensor_2eproto[0];
}
bool TensorDataDescriptor_TensorDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::FLOAT_32;
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::FLOAT_16;
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::FIXPOINT;
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::INVALID_DTYPE;
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::TensorDataType_MIN;
const TensorDataDescriptor_TensorDataType TensorDataDescriptor::TensorDataType_MAX;
const int TensorDataDescriptor::TensorDataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Tensor_TensorMemLayout_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Tensor_2eproto);
  return file_level_enum_descriptors_Tensor_2eproto[1];
}
bool Tensor_TensorMemLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tensor_TensorMemLayout Tensor::DENSE_LAYOUT;
const Tensor_TensorMemLayout Tensor::SPARSE_LAYOUT;
const Tensor_TensorMemLayout Tensor::INVALID_LAYOUT;
const Tensor_TensorMemLayout Tensor::TensorMemLayout_MIN;
const Tensor_TensorMemLayout Tensor::TensorMemLayout_MAX;
const int Tensor::TensorMemLayout_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FixpointRepresent::InitAsDefaultInstance() {
}
class FixpointRepresent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixpointRepresent::kTotalBitsFieldNumber;
const int FixpointRepresent::kIsSignedFieldNumber;
const int FixpointRepresent::kFracPointLocationsFieldNumber;
const int FixpointRepresent::kScalarsFieldNumber;
const int FixpointRepresent::kZeroPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixpointRepresent::FixpointRepresent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.FixpointRepresent)
}
FixpointRepresent::FixpointRepresent(const FixpointRepresent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      total_bits_(from.total_bits_),
      is_signed_(from.is_signed_),
      frac_point_locations_(from.frac_point_locations_),
      scalars_(from.scalars_),
      zero_points_(from.zero_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icdl_proto.FixpointRepresent)
}

void FixpointRepresent::SharedCtor() {
}

FixpointRepresent::~FixpointRepresent() {
  // @@protoc_insertion_point(destructor:icdl_proto.FixpointRepresent)
  SharedDtor();
}

void FixpointRepresent::SharedDtor() {
}

void FixpointRepresent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixpointRepresent& FixpointRepresent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FixpointRepresent_Tensor_2eproto.base);
  return *internal_default_instance();
}


void FixpointRepresent::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.FixpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_bits_.Clear();
  is_signed_.Clear();
  frac_point_locations_.Clear();
  scalars_.Clear();
  zero_points_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixpointRepresent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FixpointRepresent*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 total_bits = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_total_bits();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::uint32 value = val;
          msg->add_total_bits(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated bool is_signed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedBoolParser;
          object = msg->mutable_is_signed();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          bool value = val;
          msg->add_is_signed(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated int32 frac_point_locations = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_frac_point_locations();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_frac_point_locations(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated float scalars = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_scalars();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        do {
          float val;
          std::memcpy(&val, ptr, 4);
          ptr += 4;
          msg->add_scalars(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
        break;
      }
      // repeated int32 zero_points = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_zero_points();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_zero_points(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixpointRepresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.FixpointRepresent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 total_bits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_total_bits())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_total_bits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool is_signed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_signed())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_is_signed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 frac_point_locations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_frac_point_locations())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_frac_point_locations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scalars = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scalars())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_scalars())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 zero_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zero_points())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_zero_points())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.FixpointRepresent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.FixpointRepresent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixpointRepresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.FixpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 total_bits = 1;
  if (this->total_bits_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_total_bits_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->total_bits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->total_bits(i), output);
  }

  // repeated bool is_signed = 2;
  if (this->is_signed_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_is_signed_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->is_signed().data(), this->is_signed_size(), output);
  }

  // repeated int32 frac_point_locations = 3;
  if (this->frac_point_locations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_frac_point_locations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->frac_point_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->frac_point_locations(i), output);
  }

  // repeated float scalars = 4;
  if (this->scalars_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scalars_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->scalars().data(), this->scalars_size(), output);
  }

  // repeated int32 zero_points = 5;
  if (this->zero_points_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_zero_points_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->zero_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->zero_points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.FixpointRepresent)
}

::google::protobuf::uint8* FixpointRepresent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.FixpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 total_bits = 1;
  if (this->total_bits_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _total_bits_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->total_bits_, target);
  }

  // repeated bool is_signed = 2;
  if (this->is_signed_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _is_signed_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->is_signed_, target);
  }

  // repeated int32 frac_point_locations = 3;
  if (this->frac_point_locations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _frac_point_locations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->frac_point_locations_, target);
  }

  // repeated float scalars = 4;
  if (this->scalars_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _scalars_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scalars_, target);
  }

  // repeated int32 zero_points = 5;
  if (this->zero_points_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _zero_points_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->zero_points_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.FixpointRepresent)
  return target;
}

size_t FixpointRepresent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.FixpointRepresent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 total_bits = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->total_bits_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _total_bits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_signed = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->is_signed_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _is_signed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 frac_point_locations = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->frac_point_locations_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _frac_point_locations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float scalars = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->scalars_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _scalars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 zero_points = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->zero_points_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _zero_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixpointRepresent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.FixpointRepresent)
  GOOGLE_DCHECK_NE(&from, this);
  const FixpointRepresent* source =
      ::google::protobuf::DynamicCastToGenerated<FixpointRepresent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.FixpointRepresent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.FixpointRepresent)
    MergeFrom(*source);
  }
}

void FixpointRepresent::MergeFrom(const FixpointRepresent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.FixpointRepresent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  total_bits_.MergeFrom(from.total_bits_);
  is_signed_.MergeFrom(from.is_signed_);
  frac_point_locations_.MergeFrom(from.frac_point_locations_);
  scalars_.MergeFrom(from.scalars_);
  zero_points_.MergeFrom(from.zero_points_);
}

void FixpointRepresent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.FixpointRepresent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixpointRepresent::CopyFrom(const FixpointRepresent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.FixpointRepresent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixpointRepresent::IsInitialized() const {
  return true;
}

void FixpointRepresent::Swap(FixpointRepresent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixpointRepresent::InternalSwap(FixpointRepresent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  total_bits_.InternalSwap(&other->total_bits_);
  is_signed_.InternalSwap(&other->is_signed_);
  frac_point_locations_.InternalSwap(&other->frac_point_locations_);
  scalars_.InternalSwap(&other->scalars_);
  zero_points_.InternalSwap(&other->zero_points_);
}

::google::protobuf::Metadata FixpointRepresent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FloatpointRepresent::InitAsDefaultInstance() {
}
class FloatpointRepresent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatpointRepresent::kTotalBitsFieldNumber;
const int FloatpointRepresent::kIsSignedFieldNumber;
const int FloatpointRepresent::kExpBitsFieldNumber;
const int FloatpointRepresent::kMantissaBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatpointRepresent::FloatpointRepresent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.FloatpointRepresent)
}
FloatpointRepresent::FloatpointRepresent(const FloatpointRepresent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_bits_, &from.total_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&mantissa_bits_) -
    reinterpret_cast<char*>(&total_bits_)) + sizeof(mantissa_bits_));
  // @@protoc_insertion_point(copy_constructor:icdl_proto.FloatpointRepresent)
}

void FloatpointRepresent::SharedCtor() {
  ::memset(&total_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mantissa_bits_) -
      reinterpret_cast<char*>(&total_bits_)) + sizeof(mantissa_bits_));
}

FloatpointRepresent::~FloatpointRepresent() {
  // @@protoc_insertion_point(destructor:icdl_proto.FloatpointRepresent)
  SharedDtor();
}

void FloatpointRepresent::SharedDtor() {
}

void FloatpointRepresent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatpointRepresent& FloatpointRepresent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FloatpointRepresent_Tensor_2eproto.base);
  return *internal_default_instance();
}


void FloatpointRepresent::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.FloatpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mantissa_bits_) -
      reinterpret_cast<char*>(&total_bits_)) + sizeof(mantissa_bits_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatpointRepresent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FloatpointRepresent*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 total_bits = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_total_bits(value);
        break;
      }
      // bool is_signed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_is_signed(value);
        break;
      }
      // uint32 exp_bits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_exp_bits(value);
        break;
      }
      // uint32 mantissa_bits = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_mantissa_bits(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatpointRepresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.FloatpointRepresent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 total_bits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_signed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_signed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp_bits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mantissa_bits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mantissa_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.FloatpointRepresent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.FloatpointRepresent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatpointRepresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.FloatpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_bits = 1;
  if (this->total_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_bits(), output);
  }

  // bool is_signed = 2;
  if (this->is_signed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_signed(), output);
  }

  // uint32 exp_bits = 3;
  if (this->exp_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp_bits(), output);
  }

  // uint32 mantissa_bits = 4;
  if (this->mantissa_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mantissa_bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.FloatpointRepresent)
}

::google::protobuf::uint8* FloatpointRepresent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.FloatpointRepresent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_bits = 1;
  if (this->total_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_bits(), target);
  }

  // bool is_signed = 2;
  if (this->is_signed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_signed(), target);
  }

  // uint32 exp_bits = 3;
  if (this->exp_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp_bits(), target);
  }

  // uint32 mantissa_bits = 4;
  if (this->mantissa_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mantissa_bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.FloatpointRepresent)
  return target;
}

size_t FloatpointRepresent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.FloatpointRepresent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total_bits = 1;
  if (this->total_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_bits());
  }

  // bool is_signed = 2;
  if (this->is_signed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 exp_bits = 3;
  if (this->exp_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_bits());
  }

  // uint32 mantissa_bits = 4;
  if (this->mantissa_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mantissa_bits());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatpointRepresent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.FloatpointRepresent)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatpointRepresent* source =
      ::google::protobuf::DynamicCastToGenerated<FloatpointRepresent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.FloatpointRepresent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.FloatpointRepresent)
    MergeFrom(*source);
  }
}

void FloatpointRepresent::MergeFrom(const FloatpointRepresent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.FloatpointRepresent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_bits() != 0) {
    set_total_bits(from.total_bits());
  }
  if (from.is_signed() != 0) {
    set_is_signed(from.is_signed());
  }
  if (from.exp_bits() != 0) {
    set_exp_bits(from.exp_bits());
  }
  if (from.mantissa_bits() != 0) {
    set_mantissa_bits(from.mantissa_bits());
  }
}

void FloatpointRepresent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.FloatpointRepresent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatpointRepresent::CopyFrom(const FloatpointRepresent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.FloatpointRepresent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatpointRepresent::IsInitialized() const {
  return true;
}

void FloatpointRepresent::Swap(FloatpointRepresent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatpointRepresent::InternalSwap(FloatpointRepresent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(total_bits_, other->total_bits_);
  swap(is_signed_, other->is_signed_);
  swap(exp_bits_, other->exp_bits_);
  swap(mantissa_bits_, other->mantissa_bits_);
}

::google::protobuf::Metadata FloatpointRepresent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TensorDataDescriptor::InitAsDefaultInstance() {
  ::icdl_proto::_TensorDataDescriptor_default_instance_.fix_point_ = const_cast< ::icdl_proto::FixpointRepresent*>(
      ::icdl_proto::FixpointRepresent::internal_default_instance());
  ::icdl_proto::_TensorDataDescriptor_default_instance_.flo_point_ = const_cast< ::icdl_proto::FloatpointRepresent*>(
      ::icdl_proto::FloatpointRepresent::internal_default_instance());
}
class TensorDataDescriptor::HasBitSetters {
 public:
  static const ::icdl_proto::FixpointRepresent& fix_point(const TensorDataDescriptor* msg);
  static const ::icdl_proto::FloatpointRepresent& flo_point(const TensorDataDescriptor* msg);
};

const ::icdl_proto::FixpointRepresent&
TensorDataDescriptor::HasBitSetters::fix_point(const TensorDataDescriptor* msg) {
  return *msg->data_represent_.fix_point_;
}
const ::icdl_proto::FloatpointRepresent&
TensorDataDescriptor::HasBitSetters::flo_point(const TensorDataDescriptor* msg) {
  return *msg->data_represent_.flo_point_;
}
void TensorDataDescriptor::set_allocated_fix_point(::icdl_proto::FixpointRepresent* fix_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_represent();
  if (fix_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fix_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fix_point, submessage_arena);
    }
    set_has_fix_point();
    data_represent_.fix_point_ = fix_point;
  }
  // @@protoc_insertion_point(field_set_allocated:icdl_proto.TensorDataDescriptor.fix_point)
}
void TensorDataDescriptor::set_allocated_flo_point(::icdl_proto::FloatpointRepresent* flo_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_represent();
  if (flo_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flo_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flo_point, submessage_arena);
    }
    set_has_flo_point();
    data_represent_.flo_point_ = flo_point;
  }
  // @@protoc_insertion_point(field_set_allocated:icdl_proto.TensorDataDescriptor.flo_point)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorDataDescriptor::kDtypeFieldNumber;
const int TensorDataDescriptor::kFixPointFieldNumber;
const int TensorDataDescriptor::kFloPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorDataDescriptor::TensorDataDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.TensorDataDescriptor)
}
TensorDataDescriptor::TensorDataDescriptor(const TensorDataDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_ = from.dtype_;
  clear_has_data_represent();
  switch (from.data_represent_case()) {
    case kFixPoint: {
      mutable_fix_point()->::icdl_proto::FixpointRepresent::MergeFrom(from.fix_point());
      break;
    }
    case kFloPoint: {
      mutable_flo_point()->::icdl_proto::FloatpointRepresent::MergeFrom(from.flo_point());
      break;
    }
    case DATA_REPRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:icdl_proto.TensorDataDescriptor)
}

void TensorDataDescriptor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TensorDataDescriptor_Tensor_2eproto.base);
  dtype_ = 0;
  clear_has_data_represent();
}

TensorDataDescriptor::~TensorDataDescriptor() {
  // @@protoc_insertion_point(destructor:icdl_proto.TensorDataDescriptor)
  SharedDtor();
}

void TensorDataDescriptor::SharedDtor() {
  if (has_data_represent()) {
    clear_data_represent();
  }
}

void TensorDataDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDataDescriptor& TensorDataDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TensorDataDescriptor_Tensor_2eproto.base);
  return *internal_default_instance();
}


void TensorDataDescriptor::clear_data_represent() {
// @@protoc_insertion_point(one_of_clear_start:icdl_proto.TensorDataDescriptor)
  switch (data_represent_case()) {
    case kFixPoint: {
      delete data_represent_.fix_point_;
      break;
    }
    case kFloPoint: {
      delete data_represent_.flo_point_;
      break;
    }
    case DATA_REPRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_REPRESENT_NOT_SET;
}


void TensorDataDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.TensorDataDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dtype_ = 0;
  clear_data_represent();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorDataDescriptor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorDataDescriptor*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .icdl_proto.TensorDataDescriptor.TensorDataType dtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::icdl_proto::TensorDataDescriptor_TensorDataType value = static_cast<::icdl_proto::TensorDataDescriptor_TensorDataType>(val);
        msg->set_dtype(value);
        break;
      }
      // .icdl_proto.FixpointRepresent fix_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::icdl_proto::FixpointRepresent::_InternalParse;
        object = msg->mutable_fix_point();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .icdl_proto.FloatpointRepresent flo_point = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::icdl_proto::FloatpointRepresent::_InternalParse;
        object = msg->mutable_flo_point();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorDataDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.TensorDataDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .icdl_proto.TensorDataDescriptor.TensorDataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::icdl_proto::TensorDataDescriptor_TensorDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.FixpointRepresent fix_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fix_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.FloatpointRepresent flo_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flo_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.TensorDataDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.TensorDataDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorDataDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.TensorDataDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.TensorDataDescriptor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .icdl_proto.FixpointRepresent fix_point = 2;
  if (has_fix_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fix_point(this), output);
  }

  // .icdl_proto.FloatpointRepresent flo_point = 3;
  if (has_flo_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flo_point(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.TensorDataDescriptor)
}

::google::protobuf::uint8* TensorDataDescriptor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.TensorDataDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.TensorDataDescriptor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .icdl_proto.FixpointRepresent fix_point = 2;
  if (has_fix_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fix_point(this), target);
  }

  // .icdl_proto.FloatpointRepresent flo_point = 3;
  if (has_flo_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flo_point(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.TensorDataDescriptor)
  return target;
}

size_t TensorDataDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.TensorDataDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .icdl_proto.TensorDataDescriptor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  switch (data_represent_case()) {
    // .icdl_proto.FixpointRepresent fix_point = 2;
    case kFixPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_represent_.fix_point_);
      break;
    }
    // .icdl_proto.FloatpointRepresent flo_point = 3;
    case kFloPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_represent_.flo_point_);
      break;
    }
    case DATA_REPRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDataDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.TensorDataDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDataDescriptor* source =
      ::google::protobuf::DynamicCastToGenerated<TensorDataDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.TensorDataDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.TensorDataDescriptor)
    MergeFrom(*source);
  }
}

void TensorDataDescriptor::MergeFrom(const TensorDataDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.TensorDataDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  switch (from.data_represent_case()) {
    case kFixPoint: {
      mutable_fix_point()->::icdl_proto::FixpointRepresent::MergeFrom(from.fix_point());
      break;
    }
    case kFloPoint: {
      mutable_flo_point()->::icdl_proto::FloatpointRepresent::MergeFrom(from.flo_point());
      break;
    }
    case DATA_REPRESENT_NOT_SET: {
      break;
    }
  }
}

void TensorDataDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.TensorDataDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDataDescriptor::CopyFrom(const TensorDataDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.TensorDataDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDataDescriptor::IsInitialized() const {
  return true;
}

void TensorDataDescriptor::Swap(TensorDataDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorDataDescriptor::InternalSwap(TensorDataDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dtype_, other->dtype_);
  swap(data_represent_, other->data_represent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TensorDataDescriptor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TensorStorage::InitAsDefaultInstance() {
  ::icdl_proto::_TensorStorage_default_instance_._instance.get_mutable()->data_descriptor_ = const_cast< ::icdl_proto::TensorDataDescriptor*>(
      ::icdl_proto::TensorDataDescriptor::internal_default_instance());
}
class TensorStorage::HasBitSetters {
 public:
  static const ::icdl_proto::TensorDataDescriptor& data_descriptor(const TensorStorage* msg);
};

const ::icdl_proto::TensorDataDescriptor&
TensorStorage::HasBitSetters::data_descriptor(const TensorStorage* msg) {
  return *msg->data_descriptor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorStorage::kDataFieldNumber;
const int TensorStorage::kDataDescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorStorage::TensorStorage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.TensorStorage)
}
TensorStorage::TensorStorage(const TensorStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_data_descriptor()) {
    data_descriptor_ = new ::icdl_proto::TensorDataDescriptor(*from.data_descriptor_);
  } else {
    data_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icdl_proto.TensorStorage)
}

void TensorStorage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TensorStorage_Tensor_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_descriptor_ = nullptr;
}

TensorStorage::~TensorStorage() {
  // @@protoc_insertion_point(destructor:icdl_proto.TensorStorage)
  SharedDtor();
}

void TensorStorage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_descriptor_;
}

void TensorStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorStorage& TensorStorage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TensorStorage_Tensor_2eproto.base);
  return *internal_default_instance();
}


void TensorStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_descriptor_ != nullptr) {
    delete data_descriptor_;
  }
  data_descriptor_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorStorage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorStorage*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .icdl_proto.TensorDataDescriptor data_descriptor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::icdl_proto::TensorDataDescriptor::_InternalParse;
        object = msg->mutable_data_descriptor();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.TensorStorage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.TensorDataDescriptor data_descriptor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.TensorStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.TensorStorage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // .icdl_proto.TensorDataDescriptor data_descriptor = 2;
  if (this->has_data_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data_descriptor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.TensorStorage)
}

::google::protobuf::uint8* TensorStorage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // .icdl_proto.TensorDataDescriptor data_descriptor = 2;
  if (this->has_data_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data_descriptor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.TensorStorage)
  return target;
}

size_t TensorStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.TensorStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .icdl_proto.TensorDataDescriptor data_descriptor = 2;
  if (this->has_data_descriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_descriptor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.TensorStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorStorage* source =
      ::google::protobuf::DynamicCastToGenerated<TensorStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.TensorStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.TensorStorage)
    MergeFrom(*source);
  }
}

void TensorStorage::MergeFrom(const TensorStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.TensorStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_data_descriptor()) {
    mutable_data_descriptor()->::icdl_proto::TensorDataDescriptor::MergeFrom(from.data_descriptor());
  }
}

void TensorStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.TensorStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorStorage::CopyFrom(const TensorStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.TensorStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorStorage::IsInitialized() const {
  return true;
}

void TensorStorage::Swap(TensorStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorStorage::InternalSwap(TensorStorage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_descriptor_, other->data_descriptor_);
}

::google::protobuf::Metadata TensorStorage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Tensor::InitAsDefaultInstance() {
  ::icdl_proto::_Tensor_default_instance_._instance.get_mutable()->storage_ = const_cast< ::icdl_proto::TensorStorage*>(
      ::icdl_proto::TensorStorage::internal_default_instance());
}
class Tensor::HasBitSetters {
 public:
  static const ::icdl_proto::TensorStorage& storage(const Tensor* msg);
};

const ::icdl_proto::TensorStorage&
Tensor::HasBitSetters::storage(const Tensor* msg) {
  return *msg->storage_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kStorageFieldNumber;
const int Tensor::kTensorSizeFieldNumber;
const int Tensor::kMemLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tensor_size_(from.tensor_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_storage()) {
    storage_ = new ::icdl_proto::TensorStorage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  mem_layout_ = from.mem_layout_;
  // @@protoc_insertion_point(copy_constructor:icdl_proto.Tensor)
}

void Tensor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Tensor_Tensor_2eproto.base);
  ::memset(&storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_layout_) -
      reinterpret_cast<char*>(&storage_)) + sizeof(mem_layout_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:icdl_proto.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  if (this != internal_default_instance()) delete storage_;
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tensor& Tensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Tensor_Tensor_2eproto.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_size_.Clear();
  if (GetArenaNoVirtual() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  mem_layout_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tensor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Tensor*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .icdl_proto.TensorStorage storage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::icdl_proto::TensorStorage::_InternalParse;
        object = msg->mutable_storage();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated uint64 tensor_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_tensor_size();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::uint64 value = val;
          msg->add_tensor_size(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::icdl_proto::Tensor_TensorMemLayout value = static_cast<::icdl_proto::Tensor_TensorMemLayout>(val);
        msg->set_mem_layout(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.Tensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .icdl_proto.TensorStorage storage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 tensor_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tensor_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_tensor_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mem_layout(static_cast< ::icdl_proto::Tensor_TensorMemLayout >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.Tensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::storage(this), output);
  }

  // repeated uint64 tensor_size = 3;
  if (this->tensor_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tensor_size_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->tensor_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->tensor_size(i), output);
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mem_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::storage(this), target);
  }

  // repeated uint64 tensor_size = 3;
  if (this->tensor_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _tensor_size_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->tensor_size_, target);
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mem_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.Tensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tensor_size = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->tensor_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _tensor_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mem_layout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::google::protobuf::DynamicCastToGenerated<Tensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_size_.MergeFrom(from.tensor_size_);
  if (from.has_storage()) {
    mutable_storage()->::icdl_proto::TensorStorage::MergeFrom(from.storage());
  }
  if (from.mem_layout() != 0) {
    set_mem_layout(from.mem_layout());
  }
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_size_.InternalSwap(&other->tensor_size_);
  swap(storage_, other->storage_);
  swap(mem_layout_, other->mem_layout_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace icdl_proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::icdl_proto::FixpointRepresent* Arena::CreateMaybeMessage< ::icdl_proto::FixpointRepresent >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::FixpointRepresent >(arena);
}
template<> PROTOBUF_NOINLINE ::icdl_proto::FloatpointRepresent* Arena::CreateMaybeMessage< ::icdl_proto::FloatpointRepresent >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::FloatpointRepresent >(arena);
}
template<> PROTOBUF_NOINLINE ::icdl_proto::TensorDataDescriptor* Arena::CreateMaybeMessage< ::icdl_proto::TensorDataDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::TensorDataDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::icdl_proto::TensorStorage* Arena::CreateMaybeMessage< ::icdl_proto::TensorStorage >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::TensorStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::icdl_proto::Tensor* Arena::CreateMaybeMessage< ::icdl_proto::Tensor >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::Tensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
