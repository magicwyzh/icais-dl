// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tensor.proto

#ifndef PROTOBUF_INCLUDED_Tensor_2eproto
#define PROTOBUF_INCLUDED_Tensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Tensor_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Tensor_2eproto();
namespace icdl_proto {
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
class TensorStorage;
class TensorStorageDefaultTypeInternal;
extern TensorStorageDefaultTypeInternal _TensorStorage_default_instance_;
}  // namespace icdl_proto
namespace google {
namespace protobuf {
template<> ::icdl_proto::Tensor* Arena::CreateMaybeMessage<::icdl_proto::Tensor>(Arena*);
template<> ::icdl_proto::TensorStorage* Arena::CreateMaybeMessage<::icdl_proto::TensorStorage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace icdl_proto {

enum Tensor_TensorDataType {
  Tensor_TensorDataType_FLOAT_32 = 0,
  Tensor_TensorDataType_FLOAT_16 = 1,
  Tensor_TensorDataType_FIXPOINT = 2,
  Tensor_TensorDataType_INVALID_DTYPE = 3,
  Tensor_TensorDataType_Tensor_TensorDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Tensor_TensorDataType_Tensor_TensorDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Tensor_TensorDataType_IsValid(int value);
const Tensor_TensorDataType Tensor_TensorDataType_TensorDataType_MIN = Tensor_TensorDataType_FLOAT_32;
const Tensor_TensorDataType Tensor_TensorDataType_TensorDataType_MAX = Tensor_TensorDataType_INVALID_DTYPE;
const int Tensor_TensorDataType_TensorDataType_ARRAYSIZE = Tensor_TensorDataType_TensorDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tensor_TensorDataType_descriptor();
inline const ::std::string& Tensor_TensorDataType_Name(Tensor_TensorDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tensor_TensorDataType_descriptor(), value);
}
inline bool Tensor_TensorDataType_Parse(
    const ::std::string& name, Tensor_TensorDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tensor_TensorDataType>(
    Tensor_TensorDataType_descriptor(), name, value);
}
enum Tensor_TensorMemLayout {
  Tensor_TensorMemLayout_DENSE_LAYOUT = 0,
  Tensor_TensorMemLayout_SPARSE_LAYOUT = 1,
  Tensor_TensorMemLayout_INVALID_LAYOUT = 2,
  Tensor_TensorMemLayout_Tensor_TensorMemLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Tensor_TensorMemLayout_Tensor_TensorMemLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Tensor_TensorMemLayout_IsValid(int value);
const Tensor_TensorMemLayout Tensor_TensorMemLayout_TensorMemLayout_MIN = Tensor_TensorMemLayout_DENSE_LAYOUT;
const Tensor_TensorMemLayout Tensor_TensorMemLayout_TensorMemLayout_MAX = Tensor_TensorMemLayout_INVALID_LAYOUT;
const int Tensor_TensorMemLayout_TensorMemLayout_ARRAYSIZE = Tensor_TensorMemLayout_TensorMemLayout_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tensor_TensorMemLayout_descriptor();
inline const ::std::string& Tensor_TensorMemLayout_Name(Tensor_TensorMemLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tensor_TensorMemLayout_descriptor(), value);
}
inline bool Tensor_TensorMemLayout_Parse(
    const ::std::string& name, Tensor_TensorMemLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tensor_TensorMemLayout>(
    Tensor_TensorMemLayout_descriptor(), name, value);
}
// ===================================================================

class TensorStorage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:icdl_proto.TensorStorage) */ {
 public:
  TensorStorage();
  virtual ~TensorStorage();

  TensorStorage(const TensorStorage& from);

  inline TensorStorage& operator=(const TensorStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorStorage(TensorStorage&& from) noexcept
    : TensorStorage() {
    *this = ::std::move(from);
  }

  inline TensorStorage& operator=(TensorStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TensorStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorStorage* internal_default_instance() {
    return reinterpret_cast<const TensorStorage*>(
               &_TensorStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TensorStorage* other);
  friend void swap(TensorStorage& a, TensorStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorStorage* New() const final {
    return CreateMaybeMessage<TensorStorage>(nullptr);
  }

  TensorStorage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorStorage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TensorStorage& from);
  void MergeFrom(const TensorStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:icdl_proto.TensorStorage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tensor_2eproto;
};
// -------------------------------------------------------------------

class Tensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:icdl_proto.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Tensor* other);
  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Tensor_TensorDataType TensorDataType;
  static const TensorDataType FLOAT_32 =
    Tensor_TensorDataType_FLOAT_32;
  static const TensorDataType FLOAT_16 =
    Tensor_TensorDataType_FLOAT_16;
  static const TensorDataType FIXPOINT =
    Tensor_TensorDataType_FIXPOINT;
  static const TensorDataType INVALID_DTYPE =
    Tensor_TensorDataType_INVALID_DTYPE;
  static inline bool TensorDataType_IsValid(int value) {
    return Tensor_TensorDataType_IsValid(value);
  }
  static const TensorDataType TensorDataType_MIN =
    Tensor_TensorDataType_TensorDataType_MIN;
  static const TensorDataType TensorDataType_MAX =
    Tensor_TensorDataType_TensorDataType_MAX;
  static const int TensorDataType_ARRAYSIZE =
    Tensor_TensorDataType_TensorDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TensorDataType_descriptor() {
    return Tensor_TensorDataType_descriptor();
  }
  static inline const ::std::string& TensorDataType_Name(TensorDataType value) {
    return Tensor_TensorDataType_Name(value);
  }
  static inline bool TensorDataType_Parse(const ::std::string& name,
      TensorDataType* value) {
    return Tensor_TensorDataType_Parse(name, value);
  }

  typedef Tensor_TensorMemLayout TensorMemLayout;
  static const TensorMemLayout DENSE_LAYOUT =
    Tensor_TensorMemLayout_DENSE_LAYOUT;
  static const TensorMemLayout SPARSE_LAYOUT =
    Tensor_TensorMemLayout_SPARSE_LAYOUT;
  static const TensorMemLayout INVALID_LAYOUT =
    Tensor_TensorMemLayout_INVALID_LAYOUT;
  static inline bool TensorMemLayout_IsValid(int value) {
    return Tensor_TensorMemLayout_IsValid(value);
  }
  static const TensorMemLayout TensorMemLayout_MIN =
    Tensor_TensorMemLayout_TensorMemLayout_MIN;
  static const TensorMemLayout TensorMemLayout_MAX =
    Tensor_TensorMemLayout_TensorMemLayout_MAX;
  static const int TensorMemLayout_ARRAYSIZE =
    Tensor_TensorMemLayout_TensorMemLayout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TensorMemLayout_descriptor() {
    return Tensor_TensorMemLayout_descriptor();
  }
  static inline const ::std::string& TensorMemLayout_Name(TensorMemLayout value) {
    return Tensor_TensorMemLayout_Name(value);
  }
  static inline bool TensorMemLayout_Parse(const ::std::string& name,
      TensorMemLayout* value) {
    return Tensor_TensorMemLayout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 tensor_size = 3;
  int tensor_size_size() const;
  void clear_tensor_size();
  static const int kTensorSizeFieldNumber = 3;
  ::google::protobuf::uint64 tensor_size(int index) const;
  void set_tensor_size(int index, ::google::protobuf::uint64 value);
  void add_tensor_size(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tensor_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tensor_size();

  // .icdl_proto.TensorStorage storage = 2;
  bool has_storage() const;
  void clear_storage();
  static const int kStorageFieldNumber = 2;
  const ::icdl_proto::TensorStorage& storage() const;
  ::icdl_proto::TensorStorage* release_storage();
  ::icdl_proto::TensorStorage* mutable_storage();
  void set_allocated_storage(::icdl_proto::TensorStorage* storage);

  // .icdl_proto.Tensor.TensorDataType dtype = 1;
  void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  ::icdl_proto::Tensor_TensorDataType dtype() const;
  void set_dtype(::icdl_proto::Tensor_TensorDataType value);

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  void clear_mem_layout();
  static const int kMemLayoutFieldNumber = 4;
  ::icdl_proto::Tensor_TensorMemLayout mem_layout() const;
  void set_mem_layout(::icdl_proto::Tensor_TensorMemLayout value);

  // @@protoc_insertion_point(class_scope:icdl_proto.Tensor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tensor_size_;
  mutable std::atomic<int> _tensor_size_cached_byte_size_;
  ::icdl_proto::TensorStorage* storage_;
  int dtype_;
  int mem_layout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Tensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorStorage

// bytes data = 1;
inline void TensorStorage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorStorage::data() const {
  // @@protoc_insertion_point(field_get:icdl_proto.TensorStorage.data)
  return data_.GetNoArena();
}
inline void TensorStorage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:icdl_proto.TensorStorage.data)
}
#if LANG_CXX11
inline void TensorStorage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:icdl_proto.TensorStorage.data)
}
#endif
inline void TensorStorage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:icdl_proto.TensorStorage.data)
}
inline void TensorStorage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:icdl_proto.TensorStorage.data)
}
inline ::std::string* TensorStorage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:icdl_proto.TensorStorage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorStorage::release_data() {
  // @@protoc_insertion_point(field_release:icdl_proto.TensorStorage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorStorage::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:icdl_proto.TensorStorage.data)
}

// -------------------------------------------------------------------

// Tensor

// .icdl_proto.Tensor.TensorDataType dtype = 1;
inline void Tensor::clear_dtype() {
  dtype_ = 0;
}
inline ::icdl_proto::Tensor_TensorDataType Tensor::dtype() const {
  // @@protoc_insertion_point(field_get:icdl_proto.Tensor.dtype)
  return static_cast< ::icdl_proto::Tensor_TensorDataType >(dtype_);
}
inline void Tensor::set_dtype(::icdl_proto::Tensor_TensorDataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:icdl_proto.Tensor.dtype)
}

// .icdl_proto.TensorStorage storage = 2;
inline bool Tensor::has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline void Tensor::clear_storage() {
  if (GetArenaNoVirtual() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::icdl_proto::TensorStorage& Tensor::storage() const {
  const ::icdl_proto::TensorStorage* p = storage_;
  // @@protoc_insertion_point(field_get:icdl_proto.Tensor.storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::icdl_proto::TensorStorage*>(
      &::icdl_proto::_TensorStorage_default_instance_);
}
inline ::icdl_proto::TensorStorage* Tensor::release_storage() {
  // @@protoc_insertion_point(field_release:icdl_proto.Tensor.storage)
  
  ::icdl_proto::TensorStorage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::icdl_proto::TensorStorage* Tensor::mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::icdl_proto::TensorStorage>(GetArenaNoVirtual());
    storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icdl_proto.Tensor.storage)
  return storage_;
}
inline void Tensor::set_allocated_storage(::icdl_proto::TensorStorage* storage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:icdl_proto.Tensor.storage)
}

// repeated uint64 tensor_size = 3;
inline int Tensor::tensor_size_size() const {
  return tensor_size_.size();
}
inline void Tensor::clear_tensor_size() {
  tensor_size_.Clear();
}
inline ::google::protobuf::uint64 Tensor::tensor_size(int index) const {
  // @@protoc_insertion_point(field_get:icdl_proto.Tensor.tensor_size)
  return tensor_size_.Get(index);
}
inline void Tensor::set_tensor_size(int index, ::google::protobuf::uint64 value) {
  tensor_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icdl_proto.Tensor.tensor_size)
}
inline void Tensor::add_tensor_size(::google::protobuf::uint64 value) {
  tensor_size_.Add(value);
  // @@protoc_insertion_point(field_add:icdl_proto.Tensor.tensor_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Tensor::tensor_size() const {
  // @@protoc_insertion_point(field_list:icdl_proto.Tensor.tensor_size)
  return tensor_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Tensor::mutable_tensor_size() {
  // @@protoc_insertion_point(field_mutable_list:icdl_proto.Tensor.tensor_size)
  return &tensor_size_;
}

// .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
inline void Tensor::clear_mem_layout() {
  mem_layout_ = 0;
}
inline ::icdl_proto::Tensor_TensorMemLayout Tensor::mem_layout() const {
  // @@protoc_insertion_point(field_get:icdl_proto.Tensor.mem_layout)
  return static_cast< ::icdl_proto::Tensor_TensorMemLayout >(mem_layout_);
}
inline void Tensor::set_mem_layout(::icdl_proto::Tensor_TensorMemLayout value) {
  
  mem_layout_ = value;
  // @@protoc_insertion_point(field_set:icdl_proto.Tensor.mem_layout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace icdl_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::icdl_proto::Tensor_TensorDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::icdl_proto::Tensor_TensorDataType>() {
  return ::icdl_proto::Tensor_TensorDataType_descriptor();
}
template <> struct is_proto_enum< ::icdl_proto::Tensor_TensorMemLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::icdl_proto::Tensor_TensorMemLayout>() {
  return ::icdl_proto::Tensor_TensorMemLayout_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Tensor_2eproto
