// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tensor.proto

#include "Tensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Tensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorStorage_Tensor_2eproto;
namespace icdl_proto {
class TensorStorageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorStorage> _instance;
} _TensorStorage_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tensor> _instance;
} _Tensor_default_instance_;
}  // namespace icdl_proto
static void InitDefaultsTensorStorage_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_TensorStorage_default_instance_;
    new (ptr) ::icdl_proto::TensorStorage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::TensorStorage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorStorage_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorStorage_Tensor_2eproto}, {}};

static void InitDefaultsTensor_Tensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icdl_proto::_Tensor_default_instance_;
    new (ptr) ::icdl_proto::Tensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icdl_proto::Tensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tensor_Tensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensor_Tensor_2eproto}, {
      &scc_info_TensorStorage_Tensor_2eproto.base,}};

void InitDefaults_Tensor_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TensorStorage_Tensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tensor_Tensor_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Tensor_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Tensor_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Tensor_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Tensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::TensorStorage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, dtype_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, storage_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, tensor_size_),
  PROTOBUF_FIELD_OFFSET(::icdl_proto::Tensor, mem_layout_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::icdl_proto::TensorStorage)},
  { 6, -1, sizeof(::icdl_proto::Tensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_TensorStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::icdl_proto::_Tensor_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Tensor_2eproto = {
  {}, AddDescriptors_Tensor_2eproto, "Tensor.proto", schemas,
  file_default_instances, TableStruct_Tensor_2eproto::offsets,
  file_level_metadata_Tensor_2eproto, 2, file_level_enum_descriptors_Tensor_2eproto, file_level_service_descriptors_Tensor_2eproto,
};

const char descriptor_table_protodef_Tensor_2eproto[] =
  "\n\014Tensor.proto\022\nicdl_proto\"\035\n\rTensorStor"
  "age\022\014\n\004data\030\001 \001(\014\"\316\002\n\006Tensor\0220\n\005dtype\030\001 "
  "\001(\0162!.icdl_proto.Tensor.TensorDataType\022*"
  "\n\007storage\030\002 \001(\0132\031.icdl_proto.TensorStora"
  "ge\022\023\n\013tensor_size\030\003 \003(\004\0226\n\nmem_layout\030\004 "
  "\001(\0162\".icdl_proto.Tensor.TensorMemLayout\""
  "M\n\016TensorDataType\022\014\n\010FLOAT_32\020\000\022\014\n\010FLOAT"
  "_16\020\001\022\014\n\010FIXPOINT\020\002\022\021\n\rINVALID_DTYPE\020\003\"J"
  "\n\017TensorMemLayout\022\020\n\014DENSE_LAYOUT\020\000\022\021\n\rS"
  "PARSE_LAYOUT\020\001\022\022\n\016INVALID_LAYOUT\020\002b\006prot"
  "o3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Tensor_2eproto = {
  false, InitDefaults_Tensor_2eproto, 
  descriptor_table_protodef_Tensor_2eproto,
  "Tensor.proto", &assign_descriptors_table_Tensor_2eproto, 402,
};

void AddDescriptors_Tensor_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Tensor_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Tensor_2eproto = []() { AddDescriptors_Tensor_2eproto(); return true; }();
namespace icdl_proto {
const ::google::protobuf::EnumDescriptor* Tensor_TensorDataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Tensor_2eproto);
  return file_level_enum_descriptors_Tensor_2eproto[0];
}
bool Tensor_TensorDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tensor_TensorDataType Tensor::FLOAT_32;
const Tensor_TensorDataType Tensor::FLOAT_16;
const Tensor_TensorDataType Tensor::FIXPOINT;
const Tensor_TensorDataType Tensor::INVALID_DTYPE;
const Tensor_TensorDataType Tensor::TensorDataType_MIN;
const Tensor_TensorDataType Tensor::TensorDataType_MAX;
const int Tensor::TensorDataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Tensor_TensorMemLayout_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Tensor_2eproto);
  return file_level_enum_descriptors_Tensor_2eproto[1];
}
bool Tensor_TensorMemLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tensor_TensorMemLayout Tensor::DENSE_LAYOUT;
const Tensor_TensorMemLayout Tensor::SPARSE_LAYOUT;
const Tensor_TensorMemLayout Tensor::INVALID_LAYOUT;
const Tensor_TensorMemLayout Tensor::TensorMemLayout_MIN;
const Tensor_TensorMemLayout Tensor::TensorMemLayout_MAX;
const int Tensor::TensorMemLayout_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TensorStorage::InitAsDefaultInstance() {
}
class TensorStorage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorStorage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorStorage::TensorStorage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.TensorStorage)
}
TensorStorage::TensorStorage(const TensorStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:icdl_proto.TensorStorage)
}

void TensorStorage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TensorStorage_Tensor_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TensorStorage::~TensorStorage() {
  // @@protoc_insertion_point(destructor:icdl_proto.TensorStorage)
  SharedDtor();
}

void TensorStorage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorStorage& TensorStorage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TensorStorage_Tensor_2eproto.base);
  return *internal_default_instance();
}


void TensorStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorStorage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorStorage*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.TensorStorage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.TensorStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.TensorStorage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.TensorStorage)
}

::google::protobuf::uint8* TensorStorage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.TensorStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.TensorStorage)
  return target;
}

size_t TensorStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.TensorStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.TensorStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorStorage* source =
      ::google::protobuf::DynamicCastToGenerated<TensorStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.TensorStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.TensorStorage)
    MergeFrom(*source);
  }
}

void TensorStorage::MergeFrom(const TensorStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.TensorStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TensorStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.TensorStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorStorage::CopyFrom(const TensorStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.TensorStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorStorage::IsInitialized() const {
  return true;
}

void TensorStorage::Swap(TensorStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorStorage::InternalSwap(TensorStorage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TensorStorage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Tensor::InitAsDefaultInstance() {
  ::icdl_proto::_Tensor_default_instance_._instance.get_mutable()->storage_ = const_cast< ::icdl_proto::TensorStorage*>(
      ::icdl_proto::TensorStorage::internal_default_instance());
}
class Tensor::HasBitSetters {
 public:
  static const ::icdl_proto::TensorStorage& storage(const Tensor* msg);
};

const ::icdl_proto::TensorStorage&
Tensor::HasBitSetters::storage(const Tensor* msg) {
  return *msg->storage_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kDtypeFieldNumber;
const int Tensor::kStorageFieldNumber;
const int Tensor::kTensorSizeFieldNumber;
const int Tensor::kMemLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icdl_proto.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tensor_size_(from.tensor_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_storage()) {
    storage_ = new ::icdl_proto::TensorStorage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  ::memcpy(&dtype_, &from.dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_layout_) -
    reinterpret_cast<char*>(&dtype_)) + sizeof(mem_layout_));
  // @@protoc_insertion_point(copy_constructor:icdl_proto.Tensor)
}

void Tensor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Tensor_Tensor_2eproto.base);
  ::memset(&storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_layout_) -
      reinterpret_cast<char*>(&storage_)) + sizeof(mem_layout_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:icdl_proto.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  if (this != internal_default_instance()) delete storage_;
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tensor& Tensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Tensor_Tensor_2eproto.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_size_.Clear();
  if (GetArenaNoVirtual() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  ::memset(&dtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_layout_) -
      reinterpret_cast<char*>(&dtype_)) + sizeof(mem_layout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tensor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Tensor*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .icdl_proto.Tensor.TensorDataType dtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::icdl_proto::Tensor_TensorDataType value = static_cast<::icdl_proto::Tensor_TensorDataType>(val);
        msg->set_dtype(value);
        break;
      }
      // .icdl_proto.TensorStorage storage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::icdl_proto::TensorStorage::_InternalParse;
        object = msg->mutable_storage();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated uint64 tensor_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_tensor_size();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::uint64 value = val;
          msg->add_tensor_size(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::icdl_proto::Tensor_TensorMemLayout value = static_cast<::icdl_proto::Tensor_TensorMemLayout>(val);
        msg->set_mem_layout(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:icdl_proto.Tensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .icdl_proto.Tensor.TensorDataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::icdl_proto::Tensor_TensorDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.TensorStorage storage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 tensor_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tensor_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_tensor_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mem_layout(static_cast< ::icdl_proto::Tensor_TensorMemLayout >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icdl_proto.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icdl_proto.Tensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.Tensor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::storage(this), output);
  }

  // repeated uint64 tensor_size = 3;
  if (this->tensor_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tensor_size_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->tensor_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->tensor_size(i), output);
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mem_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:icdl_proto.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:icdl_proto.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .icdl_proto.Tensor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::storage(this), target);
  }

  // repeated uint64 tensor_size = 3;
  if (this->tensor_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _tensor_size_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->tensor_size_, target);
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mem_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:icdl_proto.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icdl_proto.Tensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tensor_size = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->tensor_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _tensor_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .icdl_proto.TensorStorage storage = 2;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  // .icdl_proto.Tensor.TensorDataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // .icdl_proto.Tensor.TensorMemLayout mem_layout = 4;
  if (this->mem_layout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mem_layout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:icdl_proto.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::google::protobuf::DynamicCastToGenerated<Tensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:icdl_proto.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:icdl_proto.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icdl_proto.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_size_.MergeFrom(from.tensor_size_);
  if (from.has_storage()) {
    mutable_storage()->::icdl_proto::TensorStorage::MergeFrom(from.storage());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.mem_layout() != 0) {
    set_mem_layout(from.mem_layout());
  }
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:icdl_proto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icdl_proto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tensor_size_.InternalSwap(&other->tensor_size_);
  swap(storage_, other->storage_);
  swap(dtype_, other->dtype_);
  swap(mem_layout_, other->mem_layout_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Tensor_2eproto);
  return ::file_level_metadata_Tensor_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace icdl_proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::icdl_proto::TensorStorage* Arena::CreateMaybeMessage< ::icdl_proto::TensorStorage >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::TensorStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::icdl_proto::Tensor* Arena::CreateMaybeMessage< ::icdl_proto::Tensor >(Arena* arena) {
  return Arena::CreateInternal< ::icdl_proto::Tensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
